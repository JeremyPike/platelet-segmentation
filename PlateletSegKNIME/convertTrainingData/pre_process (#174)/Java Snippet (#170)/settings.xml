<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="scriptImports" type="xstring" value="// Your custom imports:%%00010import org.knime.core.node.NodeLogger;%%00010import net.imglib2.RandomAccess;%%00010import net.imglib2.img.Img;%%00010import net.imglib2.img.ImgFactory;%%00010import net.imglib2.img.array.ArrayImgFactory;%%00010import net.imglib2.type.numeric.integer.UnsignedShortType;%%00010import net.imglib2.type.numeric.IntegerType;%%00010%%00010"/>
<entry key="scriptFields" type="xstring" value="// Your custom variables:%%00010NodeLogger logger = NodeLogger.getLogger(AbstractJSnippet.class);"/>
<entry key="scriptBody" type="xstring" value="// Enter your code here:%%00010%%00010int bandWidth = v_bandWidthProj;%%00010%%00010int numDimensions = c_Image.numDimensions();%%00010%%00010%%00009%%00010%%00009%%00009%%00010if (numDimensions != 3) {%%00010%%00009out_inFocusImg = new ImgPlus&lt;UnsignedShortType&gt;(c_Image);%%00010} else {%%00010%%00009long[] dims = new long[c_Image.numDimensions()];%%00010%%00009c_Image.dimensions(dims);%%00010%%00009%%00010%%00009RandomAccess&lt;IntegerType&gt; ra = c_Image.randomAccess();%%00010%%00009%%00010%%00009double[] vollathSum1 = new double[(int) dims[2]];%%00010%%00009double[] vollathSum2 = new double[(int) dims[2]];%%00010%%00009double[] vollath = new double[(int) dims[2]];%%00010%%00009double val = 0;%%00010%%00009double valPlus = 0;%%00010%%00009double valPlusPlus = 0;%%00010%%00009%%00010%%00009int infocusSlice = 0;%%00010%%00009double vollathMax = 0;%%00010%%00009%%00010%%00009for (int z = 0; z &lt; dims[2]; z++) {%%00010%%00009%%00010%%00009%%00009for (int j = 0; j &lt; dims[1]; j++) {%%00010%%00009%%00009%%00009%%00010%%00009%%00009%%00009ra.setPosition(new long[] {dims[0] - 1, j, z});%%00010%%00009%%00009%%00009valPlusPlus = ra.get().getRealDouble();%%00010%%00009%%00009%%00009ra.setPosition(new long[] {dims[0] - 2, j, z});%%00010%%00009%%00009%%00009valPlus = ra.get().getRealDouble();%%00010%%00009%%00009%%00009%%00010%%00009%%00009%%00009vollathSum1[z] += valPlus * valPlusPlus;%%00010%%00009%%00009%%00009%%00010%%00009%%00009%%00009for (int i = (int) dims[0] - 3; i &gt;= 0; i--) {%%00010%%00009%%00009%%00009%%00010%%00009%%00009%%00009%%00009ra.setPosition(new long[] {i, j, z});%%00010%%00009%%00009%%00009%%00009val = ra.get().getRealDouble();%%00010%%00009%%00010%%00009%%00009%%00009%%00009vollathSum1[z] += val * valPlus;%%00010%%00009%%00009%%00009%%00009vollathSum2[z] += val * valPlusPlus;%%00010%%00009%%00010%%00009%%00009%%00009%%00009valPlusPlus = valPlus;%%00010%%00009%%00009%%00009%%00009valPlus = val;%%00010%%00009%%00009%%00009%%00009%%00010%%00009%%00009%%00009}%%00010%%00009%%00009}%%00010%%00009%%00009vollath[z] = vollathSum1[z] - vollathSum2[z];%%00010%%00009%%00009if(vollath[z] &gt; vollathMax) {%%00010%%00009%%00009%%00009vollathMax = vollath[z];%%00010%%00009%%00009%%00009infocusSlice = z;%%00010%%00009%%00009}%%00010%%00009%%00009%%00010%%00009}%%00010%%00009%%00010%%00009%%00010%%00009int bandPlus = bandWidth;%%00010%%00009int bandNeg = bandWidth;%%00010%%00009while(true) {%%00010%%00009%%00009if(infocusSlice - bandNeg &gt;= 0)  {%%00010%%00009%%00009%%00009break;%%00010%%00009%%00009} else {%%00010%%00009%%00009%%00009bandNeg--;%%00010%%00009%%00009}%%00010%%00009}%%00010%%00009while(true) {%%00010%%00009%%00009if(infocusSlice + bandPlus &lt; dims[2])  {%%00010%%00009%%00009%%00009break;%%00010%%00009%%00009} else {%%00010%%00009%%00009%%00009bandPlus--;%%00010%%00009%%00009}%%00010%%00009}%%00010%%00009%%00010%%00009ImgFactory&lt;UnsignedShortType&gt; imgFactory = new ArrayImgFactory&lt;&gt;(new UnsignedShortType());%%00010%%00009Img&lt;UnsignedShortType&gt; output  = imgFactory.create(dims[0], dims[1]);%%00010%%00009RandomAccess&lt;UnsignedShortType&gt; raOutput = output.randomAccess();%%00010%%00009%%00010%%00009int maxVal = 0;%%00010%%00009%%00009%%00010%%00009for (int j = 0; j &lt; dims[1]; j++) {%%00010%%00009%%00009for (int i = 0; i &lt; dims[0]; i++) {%%00010%%00009%%00009%%00009maxVal = 0;%%00010%%00009%%00009%%00009for(int z = infocusSlice - bandNeg; z &lt;= infocusSlice + bandPlus; z++) {%%00009%%00010%%00009%%00009%%00009%%00009%%00010%%00009%%00009%%00009%%00009ra.setPosition(new long[] {i, j, z});%%00010%%00009%%00009%%00009%%00009int tempVal = ra.get().getInteger();%%00010%%00009%%00009%%00009%%00009if(tempVal &gt; maxVal) {%%00010%%00009%%00009%%00009%%00009%%00009maxVal = tempVal;%%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009}%%00010%%00009%%00009%%00009raOutput.setPosition(new long[] {i, j});%%00010%%00009%%00009%%00009raOutput.get().set(new UnsignedShortType(maxVal));%%00010%%00009%%00009%%00009%%00010%%00009%%00009}%%00010%%00009}%%00010%%00009%%00010%%00009out_inFocusImg = new ImgPlus&lt;UnsignedShortType&gt;(output);%%00010%%00009%%00010%%00009Object[] keys = c_Image.getProperties().keySet().toArray();%%00010}%%00010%%00010%%00010"/>
<config key="jarFiles">
<entry key="array-size" type="xint" value="0"/>
</config>
<config key="outCols">
<entry key="array-size" type="xint" value="1"/>
<config key="0">
<entry key="Name" type="xstring" value="Image"/>
<entry key="JavaName" type="xstring" value="out_inFocusImg"/>
<entry key="JavaType" type="xstring" value="net.imagej.ImgPlus"/>
<entry key="JavaTypeProviderBundle" type="xstring" value="imagej-common"/>
<config key="Type">
<entry key="cell_class" type="xstring" value="org.knime.knip.base.data.img.ImgPlusCell"/>
<entry key="is_null" type="xboolean" value="false"/>
</config>
<entry key="ConverterFactory" type="xstring" value="org.knime.knip.base.data.img.ImgPlusCellFactory.createCell(class net.imagej.ImgPlus)"/>
<entry key="replaceExisting" type="xboolean" value="true"/>
</config>
</config>
<config key="outVars">
<entry key="array-size" type="xint" value="0"/>
</config>
<config key="inCols">
<entry key="array-size" type="xint" value="1"/>
<config key="0">
<entry key="Name" type="xstring" value="Image"/>
<entry key="JavaName" type="xstring" value="c_Image"/>
<entry key="JavaType" type="xstring" value="net.imagej.ImgPlus"/>
<entry key="JavaTypeProviderBundle" type="xstring" value="imagej-common"/>
<config key="Type">
<entry key="cell_class" type="xstring" value="org.knime.knip.base.data.img.ImgPlusCell"/>
<entry key="is_null" type="xboolean" value="false"/>
</config>
<entry key="ConverterFactory" type="xstring" value="org.knime.core.data.convert.java.SimpleDataCellToJavaConverterFactory(ImgPlusValue,class net.imagej.ImgPlus,ImgPlus)"/>
</config>
</config>
<config key="inVars">
<entry key="array-size" type="xint" value="1"/>
<config key="0">
<entry key="Name" type="xstring" value="bandWidthProj"/>
<entry key="JavaName" type="xstring" value="v_bandWidthProj"/>
<entry key="JavaType" type="xstring" value="java.lang.Integer"/>
<entry key="Type" type="xstring" value="INTEGER"/>
</config>
</config>
<entry key="version" type="xstring" value="version 1.x"/>
<entry key="templateUUID" type="xstring" isnull="true" value=""/>
<entry key="runOnExecute" type="xboolean" value="false"/>
<config key="bundles">
<entry key="array-size" type="xint" value="0"/>
</config>
</config>
<config key="nodeAnnotation">
<entry key="text" type="xstring" value="limited, maxProj%%00013%%00010"/>
<entry key="bgcolor" type="xint" value="16777215"/>
<entry key="x-coordinate" type="xint" value="327"/>
<entry key="y-coordinate" type="xint" value="419"/>
<entry key="width" type="xint" value="106"/>
<entry key="height" type="xint" value="30"/>
<entry key="alignment" type="xstring" value="CENTER"/>
<entry key="borderSize" type="xint" value="0"/>
<entry key="borderColor" type="xint" value="16777215"/>
<entry key="defFontSize" type="xint" value="9"/>
<entry key="annotation-version" type="xint" value="20151123"/>
<config key="styles"/>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="IDLE"/>
<entry key="factory" type="xstring" value="org.knime.base.node.jsnippet.JavaSnippetNodeFactory"/>
<entry key="node-name" type="xstring" value="Java Snippet"/>
<entry key="node-bundle-name" type="xstring" value="KNIME Java Snippet Nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.jsnippets"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-bundle-version" type="xstring" value="4.3.0.v202011191508"/>
<entry key="node-feature-name" type="xstring" value="KNIME Javasnippet"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.javasnippet.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-feature-version" type="xstring" value="4.3.0.v202011191508"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="Java Snippet"/>
<entry key="hasContent" type="xboolean" value="false"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_dir_location" type="xstring" isnull="true" value=""/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" isnull="true" value=""/>
</config>
</config>
